% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/misc_helper.R
\name{EvalText}
\alias{EvalText}
\title{Parse and evaluate a text string.}
\usage{
EvalText(x, env = parent.frame())
}
\arguments{
\item{x}{string to be sent as \code{text} argument to \code{parse}.}

\item{env}{environment to use for evaluation. the default parent.frame()
refers to the calling environment. See note for further details.}
}
\value{
the evaluated expression \code{eval(parse(text = x, env))}.
}
\description{
Shorthand for eval(parse(text = x, env)), frequently used with data.table,
with env set to the data.table.
}
\note{
\code{parent.frame()} is a good default for env, but may lead to unusual
behavior if passed to \code{EvalText()} explicitly. Default arguments are
evaluated inside the execution environment of the function where they
are used. However, explicitly passed arguments are evaluated inside the
calling environment instead. Thus, in Example 2, \code{EvalText("x")}
evaluates \code{parent.frame()} from within the execution environment of
\code{EvalText()}, and finds the execution environment of \code{fn()}, where
\code{x = 2}. This is the generally desired behavior. However,
\code{EvalText("x", parent.frame())} evaluates \code{parent.frame()} from
within the calling environment of \code{EvalText()}, i.e. from within the
execution environment of \code{fn()}. This gives the global environment,
where \code{x = 1}.
}
\examples{
# Example 1
dt <- data.table::as.data.table(mtcars)
colname <- "mpg"
dt[, amss:::EvalText(colname, dt)]
dt[, (amss:::PasteD(colname, "plus1")) := amss:::EvalText(colname, dt) + 1]

# Example 2.
x <- 1
fn <- function() {
  x <- 2
  return(c(amss:::EvalText("x"), amss:::EvalText("x", parent.frame())))
}
fn()

}
\keyword{internal}

